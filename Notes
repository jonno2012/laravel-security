URLS
-----
- Hackers can add URLs to their dodgy resource in the quert params.
- PHP will accept an array from query params.
- returning a 404 instead of a 403 will hide the existence of resources from unauthorised users.
- hackers will try and change the field name of forms to, for example, 'admin', where they would set it to '1'.
- validation over 'fillable' can be preferable because the lack of flexibility of using $fillable can lead devs to
allow the inclusion of all fields in input where those excess  fields are not even required. For example it may be an 'admin'
field which gives a user elevated privileges.
- AUtomation tools like sqlmap can be used to send requests to a form route to scan for sql vulnerability exploits. It can
get a list of DBs and vulnerable queries. It can, amongst other things, obtain the characters of a result set by analysing
how long each character takes to get because each character takes a know length of time to be returned. It can find the
tables, columns on each table etc. The hackers can get around rate limiting and scanners by randomising the schedule of
the scan requests.
- Entering "><script>alert("Boom!")</script> will output Boom!, if the form attribute delimiter is " and if the
input hasn't been handled properly
- A reflected js attack is where the malicious code is added to the url in the browser and which is then ran by the browser.
- Stored XSS is where the injected code is stored in the DB and then will not execute until it is retrieved and generated
on the page.
- 'Markdown' input is input where users are allowed to enter their own html onto the page.
- <img src="#" onmouseover="alert('Boom')"> - an example of how this can be exploited. This in theory could be perfectly
legitimate markdown but obviously we know that it isn't. So  how do we removed malicious markdown whilst keeping the
legitimate markdown. It is up to the dev to ensure that this is not possible. League\CommonMark is a package that allows
us more granular control over what is allowed.
- An HTML 'purifier' or 'sanitizer' will allow you to specifiy exactly what tags are allowed or not.

Checklist
----------
- Make sure dev mode isn't running in prod. APP_DEBUG, APP_ENV (change from local)
- Make sure they can't access telescope. What about the 403 page that it presents when it is not in local mode?
- Change the generic validation messages? this could allow them to figure out you are using laravel.
- Make sure to put gates on the seeing the form as well as being able to submit a request via the form.
- Use policies where necessary
- Make sure attributes in $fillable aren't being allowed in input where they are not needed and where the validation
is being handled by $fillable attribute as opposed to explicit validation on the request level.
- Ensure that anything in $fillable isn't being included in input.
- Filter data using validation rules. See UserController > store
- consider using the Rules\Password::default() or define your own rules in the AuthServiceProvider
- consider using the ->unCompromised() validation rule.
- Be very careful when using 'raw' queries as they rely on your own query building and will not sanitize. Always use
placeholder queries etc.
- Make sure entering bogus input doesn't throw an error.
- You should almost always escape form input values with value="{{ request('search') }}" i.e. turn the sensitive characters into html entities.
- <div>{!! nl2br(e($book->description)) !!}</div> - can be used to remove \n\r whilst escaping input. Put in an attribute on
the model to avoid having to include this everywhere.
- Ensure all markdown is handled properly. See League\CommonMark
- In actual fact in Laravel we can do thus:
Str::markdown("<img src='#' onmouseover='alert(\"Boom!\")'>", ['html_input' => 'escape']); OR
Str::markdown("<img src='#' onmouseover='alert(\"Boom!\")'>", ['html_input' => 'strip']); OR
Str::markdown("<img src='#' onmouseover='alert(\"Boom!\")'>", ['html_input' => 'strip', 'allow_unsafe_links' => false]);
See laravel docs.
Useful Commands
----------------
- php artisan make:policy --model=Book BookPolicy - create a policy for a specific model.
